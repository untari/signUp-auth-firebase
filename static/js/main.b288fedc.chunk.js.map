{"version":3,"sources":["firebase.js","components/AuthForm.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","authUI","firebaseui","AuthUI","authenticateUser","email","password","isLogin","a","signInWithEmailAndPassword","createUserWithEmailAndPassword","user","console","log","AuthForm","useState","setIsLogin","setUser","loginEmail","setLoginEmail","loginPassword","setLoginPassword","signupEmail","setSignupEmail","signupPassword","setSignupPassword","onAuthStateChanged","useEffect","start","signInOptions","GoogleAuthProvider","PROVIDER_ID","signInFlow","className","href","loading","width","height","src","alt","id","Card","Content","Button","onClick","signOut","color","Header","Menu","compact","secondary","Item","name","active","Form","Field","placeholder","type","value","onChange","e","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b288fedc.chunk.js","sourcesContent":["import firebase from 'firebase';\nimport * as firebaseui from 'firebaseui'\n\nconst firebaseConfig = {\n\n  apiKey: \"AIzaSyBjhAD5NszlL5rDYnv2g4G1X0_se6SiZxA\",\n\n  authDomain: \"project-list-app-2306a.firebaseapp.com\",\n\n  databaseURL: \"https://project-list-app-2306a-default-rtdb.firebaseio.com\",\n\n  projectId: \"project-list-app-2306a\",\n\n  storageBucket: \"project-list-app-2306a.appspot.com\",\n\n  messagingSenderId: \"454930754297\",\n\n  appId: \"1:454930754297:web:d1090bcc23eb4a47071028\",\n\n  measurementId: \"G-0ZS0TGMFMC\"\n\n};\n\n\n// Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig);\n\n\nexport const auth = firebase.auth();\nexport const authUI = new firebaseui.auth.AuthUI(auth);\n","import { useState, Fragment, useEffect } from \"react\";\nimport { Card, Menu, Form, Button } from \"semantic-ui-react\";\nimport \"../css/AuthForm.css\";\nimport { auth, authUI } from \"../firebase\";\nimport firebase from 'firebase';\n\nasync function authenticateUser(email, password, isLogin) {\n  try {\n    const user = isLogin\n      ? await auth.signInWithEmailAndPassword(email, password)\n      : await auth.createUserWithEmailAndPassword(email, password);\n    console.log(user);\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction renderLoggedIn() {\n  return (\n    <div className=\"loggedIn-wrapper\">\n      <h1>You are logged in!</h1>\n      <div>\n        <Button onClick={() => auth.signOut()} color=\"yellow\">\n          Log out\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction AuthForm() {\n  const [isLogin, setIsLogin] = useState(true);\n  const [user, setUser] = useState(null);\n\n  const [loginEmail, setLoginEmail] = useState(\"\");\n  const [loginPassword, setLoginPassword] = useState(\"\");\n\n  const [signupEmail, setSignupEmail] = useState(\"\");\n  const [signupPassword, setSignupPassword] = useState(\"\");\n  \n  auth.onAuthStateChanged((user) => setUser(user));\n\n  useEffect(() => {\n    if (!user) {\n      authUI.start(\".google-login\", {\n        signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID],\n        signInFlow: \"redirect\",\n      });\n    }\n  }, [user]);\n\n  return (\n    <div>\n      <div className=\"ribbon\">\n        <a href=\"https://github.com/untari/signup-auth-firebase\"><img loading=\"lazy\" width=\"149\" height=\"149\" src=\"https://github.blog/wp-content/uploads/2008/12/forkme_right_darkblue_121621.png?resize=149%2C149\" className=\"attachment-full size-full\" alt=\"Fork me on GitHub\" data-recalc-dims=\"1\" id=\"github-ribbon\"/>\n        </a>\n      </div>\n      <div className=\"auth-form-wrapper\">\n        <Card className=\"auth-form-card\">\n          <Card.Content>\n            {user ? (\n              renderLoggedIn()\n            ) : (\n              <Fragment>\n                <Card.Header className=\"auth-form-header\">Auth Form</Card.Header>\n                <Menu compact secondary>\n                  <Menu.Item\n                    name=\"Login\"\n                    onClick={() => setIsLogin(true)}\n                    active={isLogin}\n                  ></Menu.Item>\n                  <Menu.Item\n                    name=\"Sign up\"\n                    onClick={() => setIsLogin(false)}\n                    active={!isLogin}\n                  ></Menu.Item>\n                </Menu>\n                {isLogin ? (\n                  <Fragment>\n                    <Form>\n                      <Form.Field className=\"auth-form-fields\">\n                        <label className=\"form-labels\">Email</label>\n                        <input\n                          placeholder=\"Email Address\"\n                          name=\"loginEmail\"\n                          type=\"email\"\n                          value={loginEmail || \"\"}\n                          onChange={(e) => setLoginEmail(e.target.value)}\n                        ></input>\n                      </Form.Field>\n                      <Form.Field className=\"auth-form-fields\">\n                        <label className=\"form-labels\">Password</label>\n                        <input\n                          placeholder=\"Password\"\n                          name=\"loginPassword\"\n                          type=\"password\"\n                          value={loginPassword || \"\"}\n                          onChange={(e) => setLoginPassword(e.target.value)}\n                        ></input>\n                      </Form.Field>\n                      <Button\n                        onClick={() => authenticateUser(loginEmail, loginPassword, true)}\n                        className=\"auth-form-buttons\"\n                        color=\"green\"\n                      >\n                        Login\n                      </Button>\n                    </Form>\n                    <div className=\"google-login\"></div>\n                  </Fragment>\n                ) : (\n                  <Fragment>\n                    <Form>\n                      <Form.Field className=\"auth-form-fields\">\n                        <label className=\"form-labels\">Email</label>\n                        <input\n                          placeholder=\"Email Address\"\n                          name=\"signUpEmail\"\n                          type=\"email\"\n                          value={signupEmail || \"\"}\n                          onChange={(e) => setSignupEmail(e.target.value)}\n                        ></input>\n                      </Form.Field>\n                      <Form.Field className=\"auth-form-fields\">\n                        <label className=\"form-labels\">Password</label>\n                        <input\n                          placeholder=\"Password\"\n                          name=\"signUpPassword\"\n                          type=\"password\"\n                          value={signupPassword || \"\"}\n                          onChange={(e) => setSignupPassword(e.target.value)}\n                        ></input>\n                      </Form.Field>\n                      <Button\n                        className=\"auth-form-buttons\"\n                        color=\"teal\"\n                        onClick={() => authenticateUser(signupEmail, signupPassword, false)}\n                      >\n                        Sign up\n                      </Button>\n                    </Form>\n                    <div className=\"google-login\"></div>\n                  </Fragment>\n                )}\n              </Fragment>\n            )}\n          </Card.Content>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default AuthForm;\n","import AuthForm from './components/AuthForm'\nimport './css/AuthForm.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <AuthForm />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}